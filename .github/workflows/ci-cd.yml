# CI - CD workflow for customer web app
# Handles CI for push to dev branch
name: customer-app-service CI - CD
on:
  push:
    branches:
      - dev
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: |
          npm install --force
  build-dev:
    name: Build-Staging
    runs-on: ubuntu-latest
    needs: test
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    if: ${{ github.ref == 'refs/heads/dev' }}
    steps:
      - name: Checkout ${{ steps.extract_branch.outputs.branch }}
        uses: actions/checkout@v2
        with:
          ref: dev
      # Install doctl.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
      - name: Build container image
        run: docker build -t ${{ secrets.REGISTRY_NAME }}/dev/citisquarefe:$(echo $GITHUB_SHA | head -c7) -f Dockerfile.prod .

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: docker push ${{ secrets.REGISTRY_NAME }}/dev/citisquarefe:$(echo $GITHUB_SHA | head -c7)
  build-prod:
    name: Build-Production
    runs-on: ubuntu-latest
    needs: test
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - name: Checkout ${{ steps.extract_branch.outputs.branch }}
        uses: actions/checkout@v2
        with:
          ref: master
      # Install doctl.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
      - name: Build container image
        run: docker build -t ${{ secrets.REGISTRY_NAME }}/production/citisquarefe:$(echo $GITHUB_SHA | head -c7) -f Dockerfile.prod .

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: docker push ${{ secrets.REGISTRY_NAME }}/production/citisquarefe:$(echo $GITHUB_SHA | head -c7)
  deploy-dev:
    name: Deploy-Staging
    runs-on: ubuntu-latest
    needs: build-dev
    if: ${{ github.ref == 'refs/heads/dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: dev
      - name: Update deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/dev/citisquarefe:'${TAG}'|' $GITHUB_WORKSPACE/config/staging-deployment.yml

      # Install doctl.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/config/staging-deployment.yml

      - name: Verify deployment
        run: kubectl rollout status deployment/citisquarefe
  deploy-prod:
    name: Deploy-production
    runs-on: ubuntu-latest
    needs: build-prod
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: Update deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/production/citisquarefe:'${TAG}'|' $GITHUB_WORKSPACE/config/prod-deployment.yml

      # Install doctl.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.PROD_CLUSTER_NAME }}

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/config/prod-deployment.yml

      - name: Verify deployment
        run: kubectl rollout status deployment/citisquarefe
